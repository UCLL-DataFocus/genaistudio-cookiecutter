[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]  # https://python-poetry.org/docs/pyproject/
name = "{{ cookiecutter.__project_name_kebab_case }}"
version = "0.0.0"
description = "{{ cookiecutter.app_description }}"
authors = ["{{ cookiecutter.app_lead_name }}, {{ cookiecutter.researchers_names }}"]
readme = "README.md"
repository = "{{ cookiecutter.openproject_url }}"
package-mode = false
{%- if cookiecutter.with_conventional_commits|int %}

[tool.commitizen]  # https://commitizen-tools.github.io/commitizen/config/
bump_message = "bump(release): v$current_version â†’ v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version_provider = "poetry"
{%- endif %}

[tool.poetry.dependencies]  # https://python-poetry.org/docs/dependency-specification/
{%- if cookiecutter.with_fastapi_api|int %}
coloredlogs = ">=15.0.1"
fastapi = { extras = ["all"], version = ">=0.110.1" }
gunicorn = ">=21.2.0"
{%- endif %}
{%- if cookiecutter.with_streamlit|int %}
streamlit = "1.41.1"
{%- endif %}
poethepoet = "^0.33.0"
python = ">={{ cookiecutter.python_version }},<4.0"
{%- if cookiecutter.with_typer_cli|int %}
typer = { extras = ["all"], version = ">=0.12.0" }
{%- endif %}
{%- if cookiecutter.with_fastapi_api|int %}
uvicorn = { extras = ["standard"], version = ">=0.32.0" }
{%- endif %}
{%- if cookiecutter.include_speech|int %}
speechrecognition = ">=3.8.1"
pyaudio = "^0.2.14"
{%- endif %}
{%- if cookiecutter.include_notebooks|int %}
ipykernel = "^6.22.0"
jupyter = "^1.0.0"
jupytext = "^1.15.2"
{%- endif %}
{%- if cookiecutter.work_with_data|int %}
pandas = "^2.2.3"
matplotlib = "^3.8.4"
scipy = "^1.11.0"
numpy = "^1.26.0"
seaborn = "^0.13.2"
{%- endif %}
{%- if cookiecutter.include_llm|int %}
langchain = "^0.3.7"
python-dotenv = "^1.0.1"

{%- if "gpt-4o-mini" in cookiecutter["llm's (comma-separated, press Enter for all)"] %}
langchain-openai = "^0.2.8"
{%- endif %}

{%- if "mistral-nemo" in cookiecutter["llm's (comma-separated, press Enter for all)"] %}
langchain-mistralai = "^0.2.6"
{%- endif %}

{%- if "llama3" in cookiecutter["llm's (comma-separated, press Enter for all)"] or "mistral-large" in cookiecutter["llm's (comma-separated, press Enter for all)"] %}
azure-ai-inference = "^1.0.0b9"
azure-core = "^1.32.0"
{%- endif %}

{%- endif %}

[tool.poetry.group.test.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
{%- if cookiecutter.with_conventional_commits|int %}
commitizen = ">=3.21.3"
{%- endif %}
coverage = { extras = ["toml"], version = ">=7.4.4" }
mypy = "^1.15.0"
pre-commit = ">=3.7.0"
pytest = "^8.3.5"
pytest-mock = ">=3.14.0"
pytest-xdist = ">=3.5.0"
ruff = ">=0.5.7"
{%- if cookiecutter.development_environment == "strict" %}
safety = ">=3.1.0"
shellcheck-py = ">=0.10.0.1"
typeguard = ">=4.2.1"
{%- endif %}

[tool.poetry.group.dev.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
cruft = ">=2.15.0"
ipykernel = ">=6.29.4"
ipython = ">=8.18.0"
ipywidgets = ">=8.1.2"
pdoc = ">=14.4.0"

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
{%- if cookiecutter.development_environment == "strict" %}
fail_under = 50
{%- endif %}
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
{%- if cookiecutter.with_fastapi_api|int %}
plugins = "pydantic.mypy"
{%- endif %}
{%- if cookiecutter.development_environment == "strict" %}
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
{%- endif %}
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true
{%- if cookiecutter.development_environment == "strict" and cookiecutter.with_fastapi_api|int %}

[tool.pydantic-mypy]  # https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true
{%- endif %}

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first{% if cookiecutter.development_environment == 'strict' %} --strict-config --strict-markers --typeguard-packages=src {% endif %} --verbosity=2 --junitxml=reports/pytest.xml"
{%- if cookiecutter.development_environment == "strict" %}
filterwarnings = ["error", "ignore::DeprecationWarning"]
{%- endif %}
testpaths = ["src", "tests"]
xfail_strict = true

[tool.ruff]  # https://github.com/charliermarsh/ruff
fix = true
line-length = 100
src = ["src", "tests"]
target-version = "py{{ cookiecutter.python_version.split('.')[:2]|join }}"

[tool.ruff.lint]
{%- if cookiecutter.development_environment == "strict" %}
select = ["A", "ASYNC", "B", "BLE", "C4", "C90", "D", "DTZ", "E", "EM", "ERA", "F", "FBT", "FLY", "FURB", "G", "I", "ICN", "INP", "INT", "ISC", "LOG", "N", "NPY", "PERF", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "Q", "RET", "RSE", "RUF", "S", "SIM", "SLF", "SLOT", "T10", "T20", "TCH", "TID", "TRY", "UP", "W", "YTT"]
ignore = ["D203", "D213", "E501", "RET504", "S101", "S307"]
unfixable = ["ERA001", "F401", "F841", "T201", "T203"]
{%- else %}
select = ["A", "ASYNC", "B", "C4", "C90", "D", "DTZ", "E", "F", "FLY", "FURB", "I", "ISC", "LOG", "N", "NPY", "PERF", "PGH", "PIE", "PL", "PT", "Q", "RET", "RUF", "RSE", "SIM", "TID", "UP", "W", "YTT"]
ignore = ["D203", "D213", "E501", "PGH002", "PGH003", "RET504", "S101", "S307"]
unfixable = ["F401", "F841"]
{%- endif %}

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
{%- if cookiecutter.development_environment == "strict" %}

[tool.ruff.lint.pycodestyle]
max-doc-length = 100
{%- endif %}

[tool.ruff.lint.pydocstyle]
convention = "{{ cookiecutter.__docstring_style|lower }}"

[tool.poe.tasks]  # https://github.com/nat-n/poethepoet
{%- if cookiecutter.with_fastapi_api|int %}

  [tool.poe.tasks.api]
  help = "Serve the REST API"
  shell = """
    if [ $dev ]
    then {
      uvicorn \
        --host $host \
        --port $port \
        --reload \
        src.api:app
    } else {
      gunicorn \
        --access-logfile - \
        --bind $host:$port \
        --graceful-timeout 10 \
        --keep-alive 10 \
        --log-file - \
        --timeout 30 \
        --worker-class uvicorn.workers.UvicornWorker \
        --worker-tmp-dir /dev/shm \
        --workers 2 \
        src.api:app
    } fi
    """

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this host (default: 0.0.0.0)"
    name = "host"
    options = ["--host"]
    default = "0.0.0.0"

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"

    [[tool.poe.tasks.api.args]]
    help = "Enable development mode"
    type = "boolean"
    name = "dev"
    options = ["--dev"]
{%- else %}

  [tool.poe.tasks.app]
  help = "Serve the app"

    [[tool.poe.tasks.app.sequence]]
    cmd = "echo 'Serving app...'"
{%- endif %}

{%- if cookiecutter.with_streamlit|int %}
  [tool.poe.tasks.run]
  help = "Run the Streamlit app"
  cmd = "streamlit run app.py"
{%- endif %}

[tool.poe.tasks.ruff]
cmd = "ruff check ."

[tool.poe.tasks.ruff-fix]
cmd = "ruff check . --fix ."

[tool.poe.tasks.coverage]
cmd = "coverage run -m pytest"

[tool.poe.tasks.coverage-report]
cmd = "coverage report"

[tool.poe.tasks.coverage-html]
cmd = "coverage html"

[tool.poe.tasks.mypy]
cmd = "mypy ."

[tool.poe.tasks.test]
cmd = "pytest"

{%- if cookiecutter.include_speech|int %}
  [tool.poe.tasks.speech-test]
  help = "Test speech recognition"
  cmd = "python src/speech.py"
{%- endif %}

  [tool.poe.tasks.docs]
  help = "Generate this app's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      src
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: {{ cookiecutter.__docstring_style|lower }})"
    name = "docformat"
    options = ["--docformat"]
    default = "{{ cookiecutter.__docstring_style|lower }}"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"

  [tool.poe.tasks.lint]
  help = "Lint this app"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """
{%- if cookiecutter.development_environment == "strict" %}

    [[tool.poe.tasks.lint.sequence]]
    shell = "safety check --continue-on-error --full-report"
{%- endif %}
